#!/bin/bash

set -eo pipefail

add_helm_repo() {
  echo "adding helm repository $1"
  run helm repo add "$1" "$2"
}

check_var_is_defined() {
  if [ -z "${!1}" ]; then
    >&2 echo "environment variable $1 must be defined"
    exit 1
  fi
}

ensure_installed() {
  if ! command -v "$1" > /dev/null 2>&1; then
    echo "installing $1..."
    run_remote_script_as_root "$1" "$2" "${@:4}"
    $3
  fi
}

install_chart() {
  echo "installing $2"
  run helm upgrade --install -n "$1" --create-namespace "${@:4}" "$2" "$3"
}

is_root() {
  [ $EUID -ne 0 ] && [ "$USE_SUDO" = "true" ]
}

k3s_post_install() {
  if [ -f ~/.kube/config ]; then
    cp ~/.kube/config "$HOME/.kube/config.$(date '+%s')"
  fi
  if ! is_root; then
    prefix="sudo"
  fi
  mkdir -p ~/.kube
  $prefix cp /etc/rancher/k3s/k3s.yaml $KUBE_CONFIG
  $prefix chown -R "$USER:" ~/.kube
}

run() {
  if ! "$@" >> $log_file 2>&1; then
    >&2 echo "command failed"
    >&2 echo "see $log_file for more information"
    exit 1
  fi
}

run_with_stdin() {
  if ! cat - | "$@" >> $log_file 2>&1; then
    >&2 echo "command failed"
    >&2 echo "see $log_file for more information"
    exit 1
  fi
}

run_remote_script_as_root() {
  if ! is_root; then
    prefix="sudo"
  fi
  if ! curl -sfL "$2" 2>> $log_file | $prefix bash -s -- "${@:3}" >> $log_file 2>&1; then
    >&2 echo "failed to install $1"
    >&2 echo "see $log_file for more information"
    exit 1
  fi
}

KUBE_CONFIG=~/.kube/config

ingress_create=false
issuer=letsencrypt
log_file=get-simpaas.log
ns_cert_manager=cert-manager
ns_simpaas=simpaas
repo_jetstack=jetstack
repo_simpaas=simpaas
sec_name_gmail=simpaas-gmail
sec_key_gmail_pwd=password
sec_name_gmail=simpaas-gmail

if [ -f .env ]; then
  # shellcheck source=/dev/null
  source .env
fi

if [ -n "$SIMPAAS_CONFIG" ]; then
  set_values=(--values "$SIMPAAS_CONFIG")
fi
if [ -n "$SIMPAAS_DOMAIN" ]; then
  ingress_create=true
fi
if [ "$SIMPAAS_GMAIL_RELAY_ENABLED" = "true" ]; then
  check_var_is_defined GMAIL_USER
  check_var_is_defined GMAIL_PASSWORD
  set_smtp_env=(--set-json "smtp.env=[{\"name\":\"GMAIL_USER\",\"value\":\"$GMAIL_USER\"},{\"name\":\"GMAIL_PASSWORD\",\"valueFrom\":{\"secretKeyRef\":{\"name\":\"$sec_name_gmail\",\"key\":\"$sec_key_gmail_pwd\"}}}]")
fi

ensure_installed k3s https://get.k3s.io k3s_post_install --disable=traefik
ensure_installed helm https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3

add_helm_repo $repo_jetstack https://charts.jetstack.io
add_helm_repo $repo_simpaas https://leroyguillaume.github.io/simpaas
echo "updating helm repositories"
run helm repo update

install_chart $ns_cert_manager cert-manager $repo_jetstack/cert-manager \
  --set crds.enabled=true
echo "creating letsencrypt issuer"
run_with_stdin kubectl -n $ns_cert_manager apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: $issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: $SIMPAAS_CERT_MANAGER_EMAIL
    privateKeySecretRef:
      name: $issuer-key
    solvers:
      - http01:
          ingress: {}
EOF

install_chart $ns_simpaas simpaas $repo_simpaas/simpaas-stack \
  --set "simpaas.common.image.tag=$SIMPAAS_VERSION" \
  --set simpaas.ingress.create=$ingress_create \
  --set "simpaas.ingress.domain=$SIMPAAS_DOMAIN" \
  --set-json "simpaas.ingress.annotations={\"cert-manager.io/cluster-issuer\":\"$issuer\"}" \
  --set-json "grafana={\"grafana.ini\":{\"server\":{\"domain\":\"$SIMPAAS_DOMAIN\"}}}" \
  "${set_smtp_env[@]}" \
  "${set_values[@]}"

if [ "$SIMPAAS_GMAIL_RELAY_ENABLED" = "true" ]; then
  echo "creating gmail secret"
  run_with_stdin kubectl -n $ns_simpaas apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: $sec_name_gmail
type: Opaque
data:
  $sec_key_gmail_pwd: $(echo -n "$GMAIL_PASSWORD" | base64)
EOF
fi
